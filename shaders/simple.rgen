#version 460
#extension GL_NV_ray_tracing : require

layout(binding = 0) uniform accelerationStructureNV scene;
layout(binding = 1, rgba8) uniform image2D result;
layout(binding = 2) uniform CameraMatrices 
{
	mat4 model;
	mat4 view;
	mat4 proj;
	mat4 iview;
	mat4 iproj;
} ubo;

struct HitInfo
{
	vec4 color_dist;
	vec4 normal;
};

struct ShadowInfo
{
	float distance;
};

struct Attributes
{
	vec2 bary;
};

layout(location = 0) rayPayloadNV HitInfo payload;
layout(location = 1) rayPayloadNV ShadowInfo shadow_payload;

void main()
{
	uvec2 launch_index = gl_LaunchIDNV.xy;
	vec2 dims = vec2(gl_LaunchSizeNV.xy);
	vec2 d = (((launch_index.xy + 0.5f) / dims.xy) * 2.0f - 1.0f);

	vec3 origin = (ubo.iview * vec4(0, 0, 0, 1.0)).xyz;
	vec4 target = ubo.iproj * vec4(d.x, d.y, 1.0, 1.0);
	vec3 dir = (ubo.iview * vec4(target.xyz, 0.0)).xyz;
	//vec3 origin = vec3(d.x, -d.y, 1.0);
	//vec3 dir = vec3(0.0, 0.0, -1.0);

	const uint ray_flags = gl_RayFlagsOpaqueNV;
	const uint shadow_ray_flags = gl_RayFlagsOpaqueNV | gl_RayFlagsTerminateOnFirstHitNV;

	vec3 final_color = vec3(0.0);

	traceNV(scene, ray_flags, 0xFF, 0, 1, 0, origin, 0.0, dir, 1000.0, 0);
	
	const vec3 color = payload.color_dist.xyz;
	const float hdist = payload.color_dist.w;

	if (hdist < 0.0) {
		final_color = color;
	} else {
		const vec3 hit_normal = payload.normal.xyz;
		const vec3 hit_pos = origin + dir *  hdist;
		const vec3 to_light = normalize(vec3(-10.0, 10.0, 10.0));
		const vec3 shadow_ray_orig = hit_pos + hit_normal * 0.001f;

		traceNV(scene, shadow_ray_flags, 0xFF, 1, 1, 1, shadow_ray_orig, 0.0, to_light, 1000.0, 1);
	
		const float ambient = 0.1;
		const float lighting = (shadow_payload.distance > 0.0f) ? ambient : max(ambient, dot(hit_normal, to_light));
		final_color = lighting * color;
		//final_color = color;
	}

	imageStore(result, ivec2(gl_LaunchIDNV.xy), vec4(final_color, 1.0));
}

