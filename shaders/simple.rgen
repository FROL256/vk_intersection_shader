#version 460
#extension GL_EXT_ray_tracing : require

#include "common.glsl"
#include "random.glsl"

layout(set = 0, binding = 0) uniform accelerationStructureEXT scene;

layout(set = 0, binding = 1, rgba8) uniform image2D result;

layout(set = 0, binding = 2, std140) uniform SceneUniformsBlock 
{
	SceneUniforms ubo;
};

layout(location = 0) rayPayloadEXT HitPayload payload;

vec2 subpixel_jitter(uvec2 index, uvec2 dims, uint samples)
{
	// jitter sample
	uint seed = random_tea(index.y * dims.x + index.x, samples);
	float r0 = random_float(seed);
	float r1 = random_float(seed);
	vec2 jitter = samples == 0 ? vec2(0.5) : vec2(r0, r1);
	return jitter;
}

void main()
{
	uvec2 launch_index = gl_LaunchIDEXT.xy;
	uvec2 dims = gl_LaunchSizeEXT.xy;

	vec2 jitter = subpixel_jitter(launch_index, dims, ubo.samples_accum);

	vec2 d = (vec2(launch_index) + jitter) / vec2(dims);
	// go to [-1, +1]
	d = 2.0 * d - 1.0;

	vec3 origin = (ubo.iview * vec4(0, 0, 0, 1.0)).xyz;
	vec4 target = ubo.iproj * vec4(d.x, d.y, 1.0, 1.0);
	vec3 dir = (ubo.iview * vec4(target.xyz, 0.0)).xyz;

	const uint ray_flags = gl_RayFlagsOpaqueEXT;
	
	payload.depth = 0;
	traceRayEXT(scene, ray_flags, 0xFF, 0, 2, 0, origin, 0.001, dir, 1000.0, 0);
	vec3 color = payload.color_dist.xyz;
	const float hdist = payload.color_dist.w;

	if (ubo.samples_accum > 0) { // uniform branching
		float accumulator = 1.0 / float(ubo.samples_accum + 1);
		vec3 accum_color = imageLoad(result, ivec2(launch_index)).xyz;
		color = mix(accum_color, color, accumulator);
	}
	imageStore(result, ivec2(launch_index), vec4(color, 1.0));
}

