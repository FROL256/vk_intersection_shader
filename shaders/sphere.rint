#version 460
#extension GL_EXT_ray_tracing : require
#extension GL_EXT_buffer_reference : require
#extension GL_EXT_scalar_block_layout : require

struct SpherePrimitive
{
	vec4 albedo;
	float aabb_minx;
	float aabb_miny;
	float aabb_minz;
	float aabb_maxx;
	float aabb_maxy;
	float aabb_maxz;
	int material;
	float fuzz;
};

layout(buffer_reference, scalar, buffer_reference_align = 8) buffer SphereBuffer
{
	SpherePrimitive spheres[];
};

layout(shaderRecordEXT, std430) buffer ShaderRecord
{
	SphereBuffer sphere_buffer;
} shader_record;

hitAttributeEXT vec3 sphere_point;

void main()
{
	SpherePrimitive sph = shader_record.sphere_buffer.spheres[gl_PrimitiveID];
	vec3 orig = gl_WorldRayOriginEXT;
	vec3 dir = normalize(gl_WorldRayDirectionEXT);
	
	vec3 aabb_max = vec3(sph.aabb_maxx, sph.aabb_maxy, sph.aabb_maxz);
	vec3 aabb_min = vec3(sph.aabb_minx, sph.aabb_miny, sph.aabb_minz);
	vec3 center = (aabb_max + aabb_min) / vec3(2.0);
	float radius = (aabb_max.x - aabb_min.x) / 2.0;

	vec3 oc = orig - center;

	float a = dot(dir, dir);
	float b = dot(oc, dir);
	float c = dot(oc, oc) - radius * radius;
	float discr = b*b - a*c;
	if (discr <= 0.0) return;

	float temp;
	temp = (-b - sqrt(discr)) / a;
	if (temp < gl_RayTmaxEXT && temp > gl_RayTminEXT) {
		vec3 p = orig + temp * dir;
		sphere_point = p;
		reportIntersectionEXT(temp, 0u);
		return;
	}
	temp = (-b + sqrt(discr)) / a;
	if (temp < gl_RayTmaxEXT && temp > gl_RayTminEXT) {
		vec3 p = orig + temp * dir;
		sphere_point = p;
		reportIntersectionEXT(temp, 0u);
		return;
	}
}